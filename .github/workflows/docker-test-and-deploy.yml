name: Docker Build, Test & Deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  GKE_CLUSTER: multi-cluster
  GKE_ZONE: europe-west1-b

jobs:
  test-client:
    runs-on: ubuntu-latest
    name: Test Client
    steps:
      - uses: actions/checkout@v2
      - name: Build the Client Docker image
        run: docker build -t cadubentzen/react-test -f ./client/Dockerfile.dev ./client
      - name: Test Client
        run: docker run -e CI=true cadubentzen/react-test npm run test

  # There is a flow with the following matrix:
  # one image can be built and published before another one fails,
  # so we potentially have a partial deployment. How to fix this nicely
  # without building all the images sequentially in the same job
  # or having a build-only job followed by build + deploy? ðŸ¤”
  prod-build-and-publish:
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        component: [client, nginx, server, worker]
    concurrency: ${{ matrix.component }}
    runs-on: ubuntu-latest
    name: Build and publish prod ${{ matrix.component }}
    needs: test-client
    steps:
      - uses: actions/checkout@v2
      - name: Build production image for ${{ matrix.component }}
        run: docker build -t cadubentzen/multi-${{ matrix.component }}:${{ github.sha }} -t cadubentzen/multi-${{ matrix.component }}:latest ./${{ matrix.component }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish ${{ matrix.component }}
        run: docker push cadubentzen/multi-${{ matrix.component }} --all-tags

  deploy-k8s:
    if: github.ref == 'refs/heads/master'
    concurrency: k8s
    runs-on: ubuntu-latest
    name: Deploy to k8s
    needs: prod-build-and-publish
    steps:
      - uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
      - run: |-
          gcloud --quiet auth configure-docker
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SERVICE_ACCOUNT_KEY }}
      - name: Set up Kustomize
        run: |-
          cd ./k8s
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.4.1/kustomize_v4.4.1_linux_amd64.tar.gz | tar xz
          chmod u+x ./kustomize
      - name: Deploy
        run: |-
          cd ./k8s
          ./kustomize edit set image CLIENT:TAG=cadubentzen/multi-client:$GITHUB_SHA
          ./kustomize edit set image API:TAG=cadubentzen/multi-server:$GITHUB_SHA
          ./kustomize edit set image WORKER:TAG=cadubentzen/multi-worker:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/client
          kubectl rollout status deployment/api
          kubectl rollout status deployment/worker
          kubectl rollout status deployment/postgres
          kubectl rollout status deployment/redis
          kubectl get services -o wide
